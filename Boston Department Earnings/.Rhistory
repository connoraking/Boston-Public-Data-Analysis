group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
ungroup() %>%
mutate(model = fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = ~class,
name = "mpg city"
symbol = squares
mpg %>%
group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
ungroup() %>%
mutate(model = fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = ~class,
name = "mpg city",
symbol = 'square'
) %>%
add_markers(
x = ~h, y = ~model,
color = ~class,
name  = "mpg highway"
) %>%
layout(xaxis = list(title = "Miles per gallon"))
mpg %>%
group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
ungroup() %>%
mutate(model = fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = ~class,
name = "mpg city",
symbol = 'square'
) %>%
add_markers(
x = ~h, y = ~model,
color = ~class,
name  = "mpg highway"
symbol = 'triangle'
mpg %>%
group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
ungroup() %>%
mutate(model = fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = ~class,
name = "mpg city",
symbol = 'square'
) %>%
add_markers(
x = ~h, y = ~model,
color = ~class,
name  = "mpg highway",
symbol = 'triangle'
) %>%
layout(xaxis = list(title = "Miles per gallon"))
mpg %>%
group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
ungroup() %>%
mutate(model = fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = ~class,
name = "mpg city",
symbol = 'squares'
) %>%
add_markers(
x = ~h, y = ~model,
color = ~class,
name  = "mpg highway",
symbol = 'triangle'
) %>%
layout(xaxis = list(title = "Miles per gallon"))
mpg %>%
group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
ungroup() %>%
mutate(model = fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = ~class,
name = "mpg city",
symbol = 'square'
) %>%
add_markers(
x = ~h, y = ~model,
color = ~class,
name  = "mpg highway",
symbol = 'triangle'
) %>%
layout(xaxis = list(title = "Miles per gallon"))
mpg %>%
group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
ungroup() %>%
mutate(model = fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = ~class,
name = "mpg city",
symbol = 'square'
) %>%
add_markers(
x = ~h, y = ~model,
color = ~class,
name  = "mpg highway",
symbol = 'triangle'
) %>%
layout(xaxis = list(title = "Miles per gallon"))
mpg %>%
group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
ungroup() %>%
mutate(model = fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = ~class,
name = "mpg city",
symbol = 'triangle'
) %>%
add_markers(
x = ~h, y = ~model,
color = ~class,
name  = "mpg highway",
symbol = 'triangle'
) %>%
layout(xaxis = list(title = "Miles per gallon"))
mpg %>%
group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
ungroup() %>%
mutate(model = fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = ~class,
name = "mpg city",
) %>%
add_markers(
x = ~h, y = ~model,
color = ~class,
name  = "mpg highway",
symbol = 'triangle'
) %>%
layout(xaxis = list(title = "Miles per gallon"))
mpg %>%
group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
ungroup() %>%
mutate(model = fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = ~class,
name = "mpg city",
symbol = 'square'
) %>%
add_markers(
x = ~h, y = ~model,
color = ~class,
name  = "mpg highway",
symbol = 'triangle'
) %>%
layout(xaxis = list(title = "Miles per gallon"))
mpg %>%
group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
ungroup() %>%
mutate(model = fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
symbols = ifelse(class == "2seater", "square", "circle")
library(tidyverse)
library(plotly)
mpg %>%
group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy)) %>%
ungroup() %>%
mutate(model = fct_reorder(model, c)) %>%
plot_ly() %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = ~class,
name = paste("City -", unique(mpg$class)),
symbol = 'square'
) %>%
add_markers(
x = ~h, y = ~model,
color = ~class,
name  = paste("Highway -", unique(mpg$class)),
symbol = 'triangle'
) %>%
layout(xaxis = list(title = "Miles per gallon"))
mpg_summary <- mpg %>%
group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy), .groups = "drop") %>%
mutate(model = fct_reorder(model, c))
plot_ly(data = mpg_summary) %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = ~class,
name = paste("City -", class),
symbol = 'square'
) %>%
add_markers(
x = ~h, y = ~model,
color = ~class,
name  = paste("Highway -", class),
symbol = 'triangle'
) %>%
layout(xaxis = list(title = "Miles per gallon"))
mpg_summary <- mpg %>%
group_by(model, class) %>%
summarise(c = mean(cty), h = mean(hwy), .groups = "drop") %>%
mutate(model = fct_reorder(model, c))
plot_ly(data = mpg_summary) %>%
add_segments(
x = ~c, y = ~model,
xend = ~h, yend = ~model,
color = ~class,
showlegend = FALSE
) %>%
add_markers(
x = ~c, y = ~model,
color = ~class,
name = "mpg city",
symbol = 'square'
) %>%
add_markers(
x = ~h, y = ~model,
color = ~class,
name  = "mpg highway",
symbol = 'triangle'
) %>%
layout(xaxis = list(title = "Miles per gallon"))
?add_segments
?add_segments
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
library(tidyverse)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge") #side by side
View(diamonds)
d <- diamonds %>%
select(carat, depth, cut, price)
library(ggstatsplot)
install.packages("ggstatsplot")
install.packages("ggstatsplot")
install.packages("ggstatsplot")
i <- iris %>%
rename(sepal_length = Sepal.Length, sepal_width = Sepal.Width, petal_length = Petal.Length, petal_width = Petal.Width, species = Species)
library(tidyverse)
library(ggstatsplot)
install.packages("ggstatsplot")
tidyverse_update()
ggbetweenstats(
data  = iris,
x     = Species,
y     = Sepal.Length,
title = "Distribution of sepal length across Iris species"
)
library(ggstatsplot)
library(ggstatsplot)
ggbetweenstats(
data  = iris,
x     = Species,
y     = Sepal.Length,
title = "Distribution of sepal length across Iris species"
)
library(tidyverse)
library(ggstatsplot)
install.packages("dplyr")
tidyverse_update()
library(tidyverse)
tidyverse_update()
packages.install("ggstatsplot")
install.packages("ggstatsplot")
library(tidyverse)
library(ggstatsplot)
ggbetweenstats(
data  = i,
x     = species,
y     = sepal_Length,
title = "Distribution of sepal length across Iris species"
)
library(ggstatsplot)
library(tidyverse)
tidyverse_update()
install.packages(c("broom", "dbplyr", "dtplyr", "googledrive", "googlesheets4",
"hms", "httr", "jsonlite", "modelr", "rlang", "tibble", "xml2"
))
install.packages("ggstatsplot")
library(tidyverse)
library(ggstatsplot)
i <- iris %>%
rename(sepal_length = Sepal.Length, sepal_width = Sepal.Width, petal_length = Petal.Length, petal_width = Petal.Width, species = Species)
set.seed(123)
ggbetweenstats(
data  = i,
x     = species,
y     = sepal_Length,
title = "Distribution of sepal length across Iris species"
)
ggbetweenstats(
data  = i,
x     = species,
y     = sepal_length,
title = "Distribution of sepal length across Iris species"
)
ggbetweenstats(
data  = i,
x     = species,
y     = sepal_length,
type = 'parametric',
title = "Distribution of sepal length across Iris species"
)
ggbetweenstats(
data  = i,
x     = species,
y     = sepal_length,
type = 'parametric',
title = "Distribution of sepal length across Iris species",
p.adjust.method = "bonferroni"
)
ggplotly()
?ggplotly
?ggstatsplot
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
df <- read_csv("Spotify_Youtube.csv")
df <- as_tibble(df)
dependent_columns <- c(6,8:18, 22:24, 28)
df1 <- df[, dependent_columns]
df1 <- na.omit(df1)
View(df1)
df_violin <- df %>%
gather(key = "statistic", value = "Value", Likes, Comments, Views, Stream)
View(df_violin)
df_violin <- df %>%
gather(key = "statistic", value = "Value", Likes, Comments, Views, Stream) %>%
select(statistic, Value)
View(df_violin)
df_violin <- df %>%
gather(key = "statistic", count = "count", Likes, Comments, Views, Stream) %>%
select(statistic, count)
ggplot(df_violin, aes(x = Album_type, y = "Value", fill = album_type)) +
geom_violin() +
facet_wrap(~statistic, nrow = 2)
View(df1)
View(df1)
df_violin <- df %>%
gather(key = "statistic", count = "Value", Likes, Comments, Views, Stream) %>%
select(Album_type, statistic, Value)
df_violin <- df %>%
gather(key = "statistic", value = "Value", Likes, Comments, Views, Stream) %>%
select(Album_type, statistic, Value)
ggplot(df_violin, aes(x = Album_type, y = "Value", fill = album_type)) +
geom_violin() +
facet_wrap(~statistic, nrow = 2)
ggplot(df_violin, aes(x = Album_type, y = "Value", fill = Album_type)) +
geom_violin() +
facet_wrap(~statistic, nrow = 2)
ggplot(df_violin, aes(x = Album_type, y = Value, fill = Album_type)) +
geom_violin() +
facet_wrap(~statistic, nrow = 2)
for (col in colnames(df1)) {
Q1 <- quantile(df1_clean[[col]], 0.25, na.rm = TRUE)
Q3 <- quantile(df1_clean[[col]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
outliers <- df1_clean[[col]] < (Q1 - 1.5 * IQR) | df1_clean[[col]] > (Q3 + 1.5 * IQR)
df1_clean <- df1_clean[!outliers, ]
}
df1_clean <- df_violin
for (col in colnames(df1)) {
Q1 <- quantile(df1_clean[[col]], 0.25, na.rm = TRUE)
Q3 <- quantile(df1_clean[[col]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
outliers <- df1_clean[[col]] < (Q1 - 1.5 * IQR) | df1_clean[[col]] > (Q3 + 1.5 * IQR)
df1_clean <- df1_clean[!outliers, ]
}
View(df1)
knitr::opts_chunk$set(echo = FALSE)
df1_log <- df1
#Adding constant to avoid taking log of 0
df1_log$Duration_ms <- log(df1_log$Duration_ms + 1)
df1_log$Instrumentalness <- log(df1_log$Instrumentalness + 1)
Y_log <- log(Y+1)
View(df1_log)
ggplot(df1_log) +
geom_hist(aes(x = Comments))
library(ggplot2)
ggplot(df1_log) +
geom_hist(aes(x = Comments))
ggplot(df1_log) +
geom_histogram(aes(x = Comments))
ggplot(df1_log) +
geom_boxplot(aes(x = Comments))
View(df1_log)
ggplot(df1_log) +
geom_point(aes(x = Comments, y = key))
ggplot(df1_log) +
geom_point(aes(x = Comments, y = Key))
ggplot(df1_log) +
geom_point(aes(x = Key, y = Comments))
?lm()
lm(Key ~ Comments, data = df1_log)
summary(lm(Key ~ Comments, data = df1_log))
plot(lm(Comments ~ Key, data = df1_log))
library(tidyverse)
library(ggthemes)
#source: https://data.boston.gov/dataset/employee-earnings-report
earnings2022 <- read_csv("finalconsolidatedcy22earnings_feb2023.xlsx-sheet1.csv")
setwd("E:/Career/Projects/Reddit Projects/Boston Department Earnings")
#source: https://data.boston.gov/dataset/employee-earnings-report
earnings2022 <- read_csv("finalconsolidatedcy22earnings_feb2023.xlsx-sheet1.csv")
View(earnings2022)
earnings2022 %>% filter(DEPARTMENT_NAME == 'Strategy Department')
